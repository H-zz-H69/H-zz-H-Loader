from colorama import init, Fore, Style
import sys
import os
import requests
import webbrowser
from PyQt5.QtCore import Qt, QPoint, QTimer
from PyQt5.QtGui import QPixmap, QMovie
from datetime import datetime
from PyQt5.QtWidgets import QMessageBox, QFileDialog, QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QLabel, QPushButton, QDialog, QProgressBar, QStackedWidget
magenta = Fore.MAGENTA
green = Fore.GREEN
lightgreen = Fore.LIGHTGREEN_EX
red = Fore.RED
lightred = Fore.LIGHTRED_EX
Success = green + "[" + lightgreen + "+" + green + "] " + magenta
Failed = red + "[" + lightred + "-" + red + "] " + magenta
print(Success + "Succesfully Started")
init(autoreset=True)
def colorize_text(text):
    magenta = Fore.MAGENTA
    white = Fore.WHITE
    result = ""

    for char in text:
        if char in "@%":
            result += magenta + char
        else:
            result += white + char
    return result

print(Success + "Succesfully loaded Mainclass")

def decrypt_password(encrypted_password):
    result = []
    for index, char in enumerate(encrypted_password):
        if char.isalpha():
            shift = (25 - index) % 26
            if char.islower():
                new_char = chr(((ord(char) - ord('a') - shift) % 26) + ord('a'))
            elif char.isupper():
                new_char = chr(((ord(char) - ord('A') - shift) % 26) + ord('A'))
            result.append(new_char)
        else:
            result.append(char)
    
    return ''.join(result)

class LoaderWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.current_version = "Release 1.2"

        if not self.check_version():
            return  #
        ascii_art = """                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                                @@@@@@@@@@@%%%%%%@@@@@@@@@@@@@@@@@@@@@@
                                                @@@@@@@@%%%###%%%%%%%%%%%%%%%%%%@@@@@@@
                                                @@@@@@%%%--=-----=%%%%%=------:#%@@@@@@
                                                @@@@@%%%#-=%%%%#:=%%%%%=#%%%%+:#%%@@@@@
                                                @@@@%%%*+-=%%%%#:=%%%%%-#%%%%+:#%%@@@@@
                                                @@@@%%%--+=====--------=%%%%%+:#%%@@@@@
                                                @@@@%%%--%%%%%%%%%%%%%%%%%%%%=:#%%%@@@@
                                                @@@@%%%--%%%%%%%%%%%%%%%%%%%%=:#%%%@@@@
                                                @@@@%%%%*-=**+++++++*++=====++++:%%@@@@
                                                @@@@@%%%#-+%%%%%%%%%%%%%%%%%%%%#:%%@@@@
                                                @@@@@%%%#-+%%%%%###%%%%#%%#####*-%%@@@@
                                                @@@@@%%%#-+%%%%*:------:-------*#%%@@@@
                                                @@@@@@%%#-+%%%%*:+%%%%#-%%%%#=-%%%%@@@@
                                                @@@@@@%%#-+%%%%*:+%%%%#-%%%%%=-%%%@@@@@
                                                @@@@@@%%#-+%%%%*:+%%%%#-%%%%%=-%%%@@@@@
                                                @@@@@@@%#-=++++=:+%%%%#-*****--%%@@@@@@
                                                @@@@@@@@%#*******#%%%%%***++++*%@@@@@@@
                                                @@@@@@@@@@@%%%%%%%%@@@%%%%%%%@@@@@@@@@@
                                                @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                                                    Thanks for using our Service!
                                                                H-zz-H """
        
        print(colorize_text(ascii_art))
        self.setWindowTitle("H-zz-H Loader")
        print(Success + "Succesfully set Title")
        self.setWindowFlag(Qt.FramelessWindowHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        print(Success + "Succesfully set Attributes")
        self.setGeometry(100, 100, 500, 350)

        self.drag_position = QPoint()

        self.main_widget = QWidget(self)
        self.main_layout = QVBoxLayout(self.main_widget)
        print(Success + "Succesfully made draggable")

        self.header_layout = QHBoxLayout()
        self.header_label = QLabel("H-zz-H Loader", self)
        self.close_button = QPushButton("X", self)
        self.close_button.clicked.connect(self.close)
        self.header_layout.addWidget(self.header_label)
        self.header_layout.addStretch(1)
        self.header_layout.addWidget(self.close_button)
        print(Success + "Succesfully made Close Button")

        self.input_layout = QVBoxLayout()

        self.input_layout.setSpacing(10)
        self.input_layout.setContentsMargins(30, 10, 30, 30)

        self.username_label = QLabel("Username", self)
        self.username_input = QLineEdit(self)
        print(Success + "Succesfully set Username Input Field")
        self.username_input.setPlaceholderText("Enter your username")
        print(Success + "Succesfully set Input Field Placeholder")

        self.password_label = QLabel("Password", self)
        self.password_input = QLineEdit(self)
        print(Success + "Succesfully set Password Input Field")
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("Enter your password")
        print(Success + "Succesfully set Input Field Placeholder")

        self.submit_button = QPushButton("Submit", self)
        self.submit_button.clicked.connect(self.on_submit)
        print(Success + "Succesfully made Submit Button")

        self.input_layout.addWidget(self.username_label)
        self.input_layout.addWidget(self.username_input)
        self.input_layout.addWidget(self.password_label)
        self.input_layout.addWidget(self.password_input)
        self.input_layout.addWidget(self.submit_button)

        self.main_layout.addLayout(self.header_layout)
        self.main_layout.addLayout(self.input_layout)

        self.setCentralWidget(self.main_widget)

        self.apply_styles()

        print(Success + "Succesfully loaded Databank")

    def mousePressEvent(self, event):
        if event.button() == Qt.LeftButton:
            self.drag_position = event.globalPos() - self.frameGeometry().topLeft()
            event.accept()

    def mouseMoveEvent(self, event):
        if event.buttons() == Qt.LeftButton:
            self.move(event.globalPos() - self.drag_position)
            event.accept()

    def mouseReleaseEvent(self, event):
        self.drag_position = QPoint()

    def apply_styles(self):
        self.setStyleSheet("""
            QWidget {
                background-color: #F8D1D8;
            }

            QLabel {
                color: #F4A8D1;
                font-size: 20px;
                font-family: 'Comic Sans MS', cursive;
                font-weight: bold;
                margin-bottom: 5px;
            }

            QLineEdit {
                background-color: #FFE4E1;
                color: #333;
                border-radius: 15px;
                padding: 12px;
                font-size: 16px;
                font-family: 'Comic Sans MS', cursive;
            }

            QLineEdit::placeholder {
                color: #888;
            }

            QPushButton {
                background-color: #FFB6C1;
                color: white;
                border-radius: 25px;
                padding: 12px 25px;
                font-size: 18px;
                font-family: 'Comic Sans MS', cursive;
                font-weight: bold;
                border: none;
            }

            QPushButton:hover {
                background-color: #FF69B4;
            }

            QPushButton:pressed {
                background-color: #D36F95;
            }

            QPushButton#close_button {
                background-color: transparent;
                color: #F4A8D1;
                font-size: 18px;
                font-weight: bold;
                border: none;
            }

            QLabel#header_label {
                font-size: 24px;
                font-family: 'Comic Sans MS', cursive;
                font-weight: bold;
                color: #FF69B4;
                padding: 15px;
                text-align: center;
            }
        """)
        
        print(Success + "Succesfully loaded Styles")

    def fetch_user_data(self):
        url = "https://raw.githubusercontent.com/H-zz-H69/H-zz-H69.github.io/refs/heads/main/users_expiration.json"
        try:
            response = requests.get(url)
            
            if response.status_code == 200:
                return response.json()
            else:
                return None
        except requests.RequestException as e:
            return None

    def check_version(self):
        url = "https://raw.githubusercontent.com/H-zz-H69/H-zz-H69.github.io/refs/heads/main/loader_version.json"
        try:
            response = requests.get(url)
            if response.status_code == 200:
                version_info = response.json()
                remote_version = version_info.get("version")
                if remote_version == self.current_version:
                    print("[SUCCESS] Loader version is up-to-date.")
                    return True
                else:
                    print("[ERROR] Loader version mismatch.")
                    QMessageBox.critical(self, "Version Error", 
                                         f"Your loader version ({self.current_version}) is outdated.\n"
                                         f"Please update to version {remote_version}.")
                    self.close()
                    return False
            else:
                print(f"[ERROR] Failed to fetch version: {response.status_code}")
                QMessageBox.critical(self, "Error", "Unable to check loader version.")
                self.close()
                return False
        except requests.RequestException as e:
            print(f"[ERROR] Request failed: {str(e)}")
            QMessageBox.critical(self, "Error", "Network error while checking loader version.")
            self.close()
            return False

    def on_submit(self):
        username = self.username_input.text().strip()
        password = self.password_input.text().strip()
        user_data = self.fetch_user_data()

        if user_data is None:
            self.show_custom_message("Oopsie! Couldn't fetch the user data 😢", "Error")
            print("Failed: Couldn't fetch the user data 😢")
            return

        if username in user_data:
            expiration_date, encrypted_password = user_data[username]

            decrypted_password = decrypt_password(encrypted_password)

            if password == decrypted_password:
                if self.check_if_expired(expiration_date):
                    self.show_custom_message(f"UwU! Your account has expired on {expiration_date} 😞", "Expired!")
                    print(f"Failed: Your account has expired on {expiration_date} 😞")
                else:
                    self.show_custom_message(f"Yay! {username} is still valid! 🎉", "Success")
                    print(f"Success: {username} is still valid! 🎉")
                    self.load_main_menu(username, expiration_date)
            else:
                self.show_custom_message("Incorrect Username or Password 😢", "Login Failed")
                print("Failed: Incorrect Username or Password 😢")
        else:
            self.show_custom_message("UwU! Username not found in the expiration data 😓", "Invalid Username")
            print("Failed: Username not found in the expiration data 😓")

    def check_if_expired(self, expiration_date):
        today = datetime.today().date()
        expiration = datetime.strptime(expiration_date, "%d.%m.%Y").date()
        return today > expiration
    def show_custom_message(self, message, title):
            msg_box = QDialog(self)
            msg_box.setWindowTitle(title)
            layout = QVBoxLayout(msg_box)

            label = QLabel(message, self)
            label.setAlignment(Qt.AlignCenter)
            label.setStyleSheet("font-size: 18px; font-family: 'Comic Sans MS', cursive; color: #FF69B4;")
            layout.addWidget(label)

            button = QPushButton("Awww! Okie UwU", self)
            button.setStyleSheet("background-color: #FF69B4; color: white; border-radius: 15px; font-size: 16px;")
            button.clicked.connect(msg_box.accept)
            layout.addWidget(button)

            msg_box.exec_()



    def load_main_menu(self, username, expiration_date):
            self.main_menu = QMainWindow()
            self.main_menu.setWindowFlags(Qt.FramelessWindowHint)
            self.main_menu.setAttribute(Qt.WA_TranslucentBackground)
            self.main_menu.setGeometry(200, 200, 800, 500)

            self.drag_position = QPoint()

            central_widget = QWidget(self.main_menu)
            central_layout = QHBoxLayout(central_widget)

            sidebar = QWidget(self.main_menu)
            sidebar.setStyleSheet("""
                background-color: #F8D1D8;
                border-top-left-radius: 15px;
                border-bottom-left-radius: 15px;
            """)
            sidebar_layout = QVBoxLayout(sidebar)
            sidebar_layout.setContentsMargins(10, 10, 10, 10)

            self.main_content = QWidget(self.main_menu)
            self.main_content.setStyleSheet("""
                background-color: #FFE4E1;
                border-top-right-radius: 15px;
                border-bottom-right-radius: 15px;
            """)
            self.main_content_layout = QVBoxLayout(self.main_content)

            self.main_content_label = QLabel(f"Welcome, {username}!\nYour subscription expires on: {expiration_date}", self.main_menu)
            self.main_content_label.setStyleSheet("""
                font-size: 18px;
                color: #FF69B4;
                font-family: 'Comic Sans MS', cursive;
                margin-top: 30px;
                text-align: center;
            """)
            self.main_content_label.setAlignment(Qt.AlignCenter)
            self.main_content_layout.addWidget(self.main_content_label)
            
            H_zz_H_Cheats = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/hzzh.dll"
            aimware = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/aimware.dll"
            Mesa_Skinchanger = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/mesachanger.dll"

            aimwarecsgo = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/Aimware.rar"
            Fatality = "!https://f61.workupload.com/download/sSzz5FFdKYX"
            newfatality = "!https://f61.workupload.com/download/tMqm44hgMN8"
            Primordial = "!https://f61.workupload.com/download/aE8WmYmJMdf"
            Skeet_Gamesense = "!https://f61.workupload.com/download/sKexjZZh24z"

            Skinchanger_Valorant = "https://github.com/H-zz-H69/H-zz-H-Loader/blob/main/H-zz-HSkinchanger.zip"
            BunnyHop_Script = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/bhop.exe"
            Spoofer = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/Loader.rar"

            Setup_Office365 = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/OfficeSetup.exe"
            Unlocker_Office365 = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/Unlocker.zip"

            H_zz_H_Injector = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/H-zz-HInjector.rar"
            Extreme_Injector = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/Extreme.Injector.v3.7.3.-.by.master131.rar"
            Exloader = "!https://f95.workupload.com/download/VJ4nrhTCeEB"

            X48_V1 = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/d3d10.dll"

            Ida_Pro_Crack = "!https://f81.workupload.com/download/babv7CAXr2H"
            Cracking_Tool_Pack = "!https://f72.workupload.com/download/nttw5U5Kgab"

            Photoshop = "!https://download2261.mediafire.com/7kr4v29uvrsg1sYoLTcosGldYemfvaSt5mMpipa4YqljsAbqicBkRpJpRNfBnbLk5HzUJztNY5DixlaQl4Q0blbDHFwerN9mKjU6XHJAolc_IUvYXt_TUQQ-I_aMsen2d7SQxGZ7Qfj4T7Mq8IgzApqmY8JkZ3GQRef73--nbZw/iht1wfeg9tokjms/Adobe+Photoshop+2024+%28v25.9.0.573%29+Multilingual.rar"
            Premiere_Pro = "!https://download2392.mediafire.com/iqwx3xx1ckrgtl4KE983EXyKicNYaROKb3vc4XncgRP_1cnYi20-0b3nU2o5HkZBawWD0cv1w6yXxHduhVBEud8mmmH4gLNU4qqddzgtyiZKN43mVCQBz6MRMAK_IEDAO1HqvUGQErrSPTiTfYJHRE604zzyTA7SnkWpG9C6GsY/prj7cvzu4lqtvym/Adobe+Premiere+Pro+2024+%28v24.4.1.002%29+Multilingual.rar"
            After_Effects = "!https://download2363.mediafire.com/5f1g7xqbrkbgHAD9y6WMXh9vSbAOEyOqta4-pbqUzJTeoAM30jqkWjpKbJYxwl6qCkGTL8gQ5shHDAPvm6NIWEqRWaOMm6pBIHiORGVHaAwYppaYt7PTelR-9Xr2TIA5V_42VDnrnNSKl__KHMEEJqazZGZv_Hfoth80V4MnG2Y/frwxif8l97e7djs/Adobe+After+Effects+2024+%28v24.4.1.002%29+Multilingual.rar"

            Spotify_Crack = "!https://drive.google.com/file/d/1NqTR5PmOYgwtqWeK36SHqtJdi8NX4WID/view"
            Duolingo_Premium_Crack = "!https://drive.google.com/file/d/1Nczq7hKid0pvMln3QP0Yv01QDoaEcZYL/view"
            Snapchat_Mod = "!https://apk-download.co/SCV225/FMSC2.25_By_FouadMODS.apk"
            Telegram_Premium = "!https://drive.google.com/file/d/1PFNK8jZWjeNmK3y9Lupot9pikYVFoLbJ/view"
            ChatBot_AI_4_Premium = "!https://drive.google.com/file/d/1QubPvrEwqy38SbupAfnqT5_HHZTpth9B/view"

            Discord = "!https://www.discord.gg/HNYaKzKZQU"
            Source = "https://github.com/H-zz-H69/H-zz-H-Loader/raw/refs/heads/main/H-zz-HCheats.rar"

            game_list = {
            "Counter Strike 2": [
                {"name": "H-zz-H Cheats", "url": H_zz_H_Cheats},
                {"name": "Aimware", "url": aimware},
                {"name": "Mesa Skinchanger", "url": Mesa_Skinchanger}
            ],
            "Counter Strike Global Offensive": [
                {"name": "Aimware", "url": aimwarecsgo},
                {"name": "New Fatality", "url": newfatality},
                {"name": "Old Fatality", "url": Fatality},
                {"name": "Primordial", "url": Primordial},
                {"name": "Skeet / Gamesense", "url": Skeet_Gamesense}
            ],
            "Valorant": [
                {"name": "Skinchanger", "url": Skinchanger_Valorant},
                {"name": "BunnyHop Script", "url": BunnyHop_Script},
                {"name": "Spoofer", "url": Spoofer}
            ],
            "Office365": [
                {"name": "Setup", "url": Setup_Office365},
                {"name": "Unlocker", "url": Unlocker_Office365}
            ],
            "Injectorx": [
                {"name": "H_zz_H_Injector", "url": H_zz_H_Injector},
                {"name": "Extreme Injector", "url": Extreme_Injector},
                {"name": "Exloader", "url": Exloader}
            ],
            "FiveM": [
                {"name": "X48 V1", "url": X48_V1}
            ],
            "Cracking Stuff": [
                {"name": "Ida Pro Crack", "url": Ida_Pro_Crack},
                {"name": "Cracking Tool Pack", "url": Cracking_Tool_Pack}
            ],
            "Adobe Cracks": [
                {"name": "Photoshop", "url": Photoshop},
                {"name": "Premiere Pro", "url": Premiere_Pro},
                {"name": "After Effects", "url": After_Effects}
            ],
            "Android Cracks": [
                {"name": "Spotify Crack", "url": Spotify_Crack},
                {"name": "Duolingo Premium Crack", "url": Duolingo_Premium_Crack},
                {"name": "Snapchat Mod", "url": Snapchat_Mod},
                {"name": "Telegram Premium", "url": Telegram_Premium},
                {"name": "ChatBot AI 4 Premium", "url": ChatBot_AI_4_Premium}
            ],
            "Other / Need Help?": [
                {"name": "H-zz-H Cs2 Source", "url": Source},
                {"name": "Discord","url": Discord}

            ]
        }
            for game, cheats in game_list.items():
                game_button = QPushButton(game, self.main_menu)
                game_button.setStyleSheet("""
                    QPushButton {
                        background-color: #FFE4E1;
                        color: #FF69B4;
                        border-radius: 12px;
                        padding: 8px 15px;
                        font-size: 16px;
                        font-family: 'Comic Sans MS', cursive;
                        margin-bottom: 8px;
                    }
                    QPushButton:hover {
                        background-color: #FFB6C1;
                        color: white;
                    }
                """)
                game_button.clicked.connect(lambda checked, g=game, c=cheats: self.update_main_content_with_buttons(g, c))
                sidebar_layout.addWidget(game_button)

            sidebar_layout.addStretch(1)

            central_layout.addWidget(sidebar, 1)
            central_layout.addWidget(self.main_content, 4)

            self.main_menu.setCentralWidget(central_widget)
            self.main_menu.show()

            self.close()

            def mousePressEvent(event):
                if event.button() == Qt.LeftButton:
                    self.drag_position = event.globalPos() - self.main_menu.pos()
                    event.accept()

            def mouseMoveEvent(event):
                if event.buttons() == Qt.LeftButton:
                    self.main_menu.move(event.globalPos() - self.drag_position)
                    event.accept()

            def mouseReleaseEvent(event):
                self.drag_position = QPoint()

            self.main_menu.mousePressEvent = mousePressEvent
            self.main_menu.mouseMoveEvent = mouseMoveEvent
            self.main_menu.mouseReleaseEvent = mouseReleaseEvent

    def update_main_content_with_buttons(self, game, cheats):
                for i in reversed(range(self.main_content_layout.count())):
                    widget = self.main_content_layout.itemAt(i).widget()
                    if widget:
                        widget.deleteLater()

                game_title = QLabel(game, self.main_menu)
                game_title.setStyleSheet("""
                    font-size: 20px;
                    color: #FF69B4;
                    font-family: 'Comic Sans MS', cursive;
                    margin-bottom: 20px;
                    text-align: center;
                """)
                game_title.setAlignment(Qt.AlignCenter)
                self.main_content_layout.addWidget(game_title)

                for cheat in cheats:
                    cheat_button = QPushButton(cheat["name"], self.main_menu)
                    cheat_button.setStyleSheet("""
                        QPushButton {
                            background-color: #FFE4E1;
                            color: #FF69B4;
                            border-radius: 12px;
                            padding: 8px 15px;
                            font-size: 16px;
                            font-family: 'Comic Sans MS', cursive;
                            margin-bottom: 8px;
                        }
                        QPushButton:hover {
                            background-color: #FFB6C1;
                            color: white;
                        }
                    """)
                    cheat_button.clicked.connect(lambda checked, url=cheat["url"]: self.download_file(url))
                    self.main_content_layout.addWidget(cheat_button)

    def download_file(self, url):
        if url == "#":
            print("Invalid link. No action taken.")
            return

        if url.startswith("!"):
            print(f"Opening URL in web browser: {url[1:]}")
            webbrowser.open(url[1:])  
            return

        try:
            self.show_download_dialog(url)

        except requests.RequestException as e:
            print(f"Error during download: {e}")

    def show_download_dialog(self, url):
        save_path, _ = QFileDialog.getSaveFileName(
            self,  
            "[H-zz-H] Where to save?",  
            url.split("/")[-1],
            "All Files (*.*)"
        )

        if not save_path:
            print("Download canceled.")
            return

        try:
            response = requests.get(url, stream=True)
            response.raise_for_status()

            with open(save_path, "wb") as file:
                for chunk in response.iter_content(chunk_size=8192):
                    file.write(chunk)
            print(f"File successfully downloaded to {save_path}")
        except Exception as e:
            print(f"An error occurred: {e}")

if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = LoaderWindow()
    window.show()
    sys.exit(app.exec_())
